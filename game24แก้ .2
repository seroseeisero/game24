#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <cmath>
#include <chrono>
#include <conio.h>  // สำหรับ _kbhit() และ _getch()
#include <sstream>   // สำหรับ stringstream เพื่อคำนวณสูตร

using namespace std;

// ฟังก์ชันคำนวณคำตอบจากสูตร
double evaluateExpression(const string& expression) {
    double result = 0;
    stringstream ss(expression);
    char op = '+';
    double num;

    while (ss >> num) {
        if (op == '+') {
            result += num;
        } else if (op == '-') {
            result -= num;
        }
        ss >> op;
    }
    return result;
}

bool checkValidNumbers(const string& expression, const vector<int>& componentNumbers) {
    string numStr;
    for (char c : expression) {
        if (isdigit(c) || c == '.') {
            numStr += c;
        } else {
            if (!numStr.empty()) {
                double num = stod(numStr);
                // ตรวจสอบว่าตัวเลขอยู่ใน componentNumbers หรือไม่
                if (find(componentNumbers.begin(), componentNumbers.end(), num) == componentNumbers.end()) {
                    return false;  // ถ้าไม่พบหมายความว่าเป็นคำตอบผิด
                }
                numStr.clear();
            }
        }
    }

    // ตรวจสอบตัวเลขสุดท้าย
    if (!numStr.empty()) {
        double num = stod(numStr);
        if (find(componentNumbers.begin(), componentNumbers.end(), num) == componentNumbers.end()) {
            return false;
        }
    }

    return true;
}

bool checkSolution(const string& expression, double target, const vector<int>& componentNumbers) {
    if (!checkValidNumbers(expression, componentNumbers)) {
        return false;  // ถ้าตรวจสอบแล้วพบว่าใช้ตัวเลขที่ไม่ถูกต้อง
    }

    // คำนวณคำตอบจากการแสดงผลที่ผู้เล่นกรอก
    double result = evaluateExpression(expression);

    // ตรวจสอบว่า result ตรงกับ target หรือไม่
    return abs(result - target) < 1e-6;
}

struct Player {
    string name;
    int time;
    bool correctAnswer;
};

void playTimerGame(vector<Player> &players, int targetNumber, const vector<int>& componentNumbers) {
    const int maxTime = 120;

    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    for (int i = 0; i < players.size(); i++) {
        cout << "\n" << players[i].name << ", press Spacebar to start the timer..." << endl;

        while (true) {
            if (_kbhit() && _getch() == 32) {
                break;
            }
        }

        auto start = chrono::high_resolution_clock::now();
        cout << "Timer started. Enter your answer (e.g., 5+1+6+15 or (5+1)*(6-2)): ";

        string input;
        getline(cin, input);

        auto stop = chrono::high_resolution_clock::now();
        auto elapsed = chrono::duration_cast<chrono::seconds>(stop - start).count();
        players[i].time = elapsed;

        players[i].correctAnswer = checkSolution(input, targetNumber, componentNumbers);
        if (players[i].correctAnswer) {
            cout << "!Correct answer!" << endl;
        } else {
            cout << "!Wrong answer!" << endl;
        }
        cout << "Elapsed time for " << players[i].name << ": " << players[i].time << " sec.\n";
    }

    vector<Player> correctPlayers;
    vector<Player> wrongPlayers;

    for (const auto& player : players) {
        if (player.correctAnswer) {
            correctPlayers.push_back(player);
        } else {
            wrongPlayers.push_back(player);
        }
    }

    sort(correctPlayers.begin(), correctPlayers.end(), [](const Player &a, const Player &b) {
        return a.time < b.time;
    });

    sort(wrongPlayers.begin(), wrongPlayers.end(), [](const Player &a, const Player &b) {
        return a.time < b.time;
    });

    vector<Player> rankedPlayers;
    rankedPlayers.insert(rankedPlayers.end(), correctPlayers.begin(), correctPlayers.end());
    rankedPlayers.insert(rankedPlayers.end(), wrongPlayers.begin(), wrongPlayers.end());

    cout << "\n=== Ranking of players ===\n";
    for (int i = 0; i < rankedPlayers.size(); i++) {
        cout << "Rank " << i + 1 << ": " << rankedPlayers[i].name << " - " << rankedPlayers[i].time << " sec";
        if (!rankedPlayers[i].correctAnswer) {
            cout << " (Not in Component Number)";
        }
        cout << endl;
    }

    if (!correctPlayers.empty()) {
        cout << "\nWinner is: " << correctPlayers[0].name << " with " << correctPlayers[0].time << " sec!" << endl;
    } else {
        cout << "\nNo winner - all players gave incorrect answers!" << endl;
    }
}

int main() {
    srand(time(0));

    cout << "\n--  --*--ARE--*--  --" << endl;
    cout << " --  --*--YOU--*--  --" << endl;
    cout << "--- --*--READY--*-- ---" << endl;

    string ready;
    cout << "READY??? :";
    cin >> ready;

    if (ready != "yes") {
        cout << "Please type 'yes' to proceed." << endl;
        return 1;
    }

    int numPlayers;
    cout << "Enter number of players (1-4): ";
    cin >> numPlayers;

    if (numPlayers < 1 || numPlayers > 4) {
        cout << "Invalid number of players. Please enter a number between 1 and 4." << endl;
        return 1;
    }

    vector<Player> players(numPlayers);
    for (int i = 0; i < numPlayers; i++) {
        cout << "Enter name for Player " << i + 1 << ": ";
        cin >> players[i].name;
    }

    int initialNumber = 27;
    cout << "Initial Number: " << initialNumber << endl;

    vector<int> componentNumbers = {1, 6, 9, 11};

    // แสดง Component Numbers
    cout << "Component Numbers: ";
    for (int num : componentNumbers) {
        cout << num << " ";
    }
    cout << endl;

    playTimerGame(players, initialNumber, componentNumbers);

    return 0;
}
